pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Wähle die Umgebung')
        string(name: 'MESSAGE', defaultValue: '', description: 'Gib eine Nachricht für das Deployment an')
    }

    stages {
        stage('Clean_Workplace') {
            steps {
                sh "rm -rf ./*"
            }
        }
        stage('Checkout') {
            steps {
                sh "git clone https://github.com/DeynesA/Git_Hub.git"
            }
        }
        stage('Build') {
            steps {
                sh "echo 'Building project'"
            }
        }
        stage('Deploy') {
            steps {
                script {
                    def message = params.MESSAGE ?: "Kein Kommentar zum Deployment angegeben."
                    if (params.ENV == 'prod' && currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) == null) {
                        echo "Achtung! Deployment auf PROD darf nur manuell erfolgen!"
                        error("Deployment auf PROD abgebrochen.")
                    } else {
                        try {
                            if (params.ENV == 'dev') {
                                echo "Deployment in DEV läuft..."
                            } else if (params.ENV == 'staging') {
                                echo "Deployment in STAGING läuft..."
                            } else if (params.ENV == 'prod') {
                                echo "Deployment in PROD läuft..."
                            }
                            echo "Nachricht des Nutzers: ${message}"
                            sh 'exit 1' // Simuliert einen Fehler
                        } catch (Exception e) {
                            echo "Fehler! Deployment in ${params.ENV} fehlgeschlagen."
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        stage('Verification') {
            steps {
                script {
                    if (currentBuild.result == 'FAILURE') {
                        echo "Fehler! Deployment in ${params.ENV} fehlgeschlagen."
                    } else {
                        echo "Deployment erfolgreich"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline beendet, abgeschlossen"
        }
    }
}